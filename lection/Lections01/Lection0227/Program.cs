//delegate

//модификаторы deligate типВозврата ИмяДелегата(список параметров)

//Этап 2 - создание и инициализация
// 1 вариант:
// ИмяДелегата имя Экземпляра = new ИмяДелегата(ИмяМетода)
// 2 вариант:
// ИмяДелегата имяЭкземпляра = ИмяМетода:

//Этап 3 - вызов метода экземпляра
// 1 вариант: void
// ИмяЭкземпляра(значения параметров)
// 2 вариант: не void
// переменная = ИмяЭкземпляра(значения параметров)

//Invoke
// 1 вариант:
// имяЭкземпляра.Invoke(значения параметров)
// 2 вариант:
// if(имяЭкземпляра is not null)
//      имяЭкземпляра.Invoke(значения параметров)
// 3 вариант:
// имяЭкземпляра?.Invoke(значения параметров)

//Этап 4 подписка(+=) и отписка(-=) экземпляра на методы
// ИмяДелегата имяЭкземпляра = ИмяМетода1:
// имяЭкземпляра += ИмяМетода2;
// ИмяЭкземпляра(значения параметров); метод1 метод2
// имяЭкземпляра -= ИмяМетода2;
// ИмяЭкземпляра(значения параметров); метод2

//Этап 5 - объединение делигатов
// ИмяДелегата имяЭкземпляра1 = ИмяМетода1;
// ИмяДелегата имяЭкземпляра2 = ИмяМетода2;
// ИмяДелегата имяЭкземпляра3 = ИмяЭкземпляра1 + ИмяЭкземпляра2;
// ИмяЭкземпляра3(значения параметров); метод1 метод2

//Этап 6 - передача делегатов в методы
//private static void ИмяМетода(ИмяДелегата имяЭкземпляра)
//{
//    // вызов метода экземпляра
//}


//Встроенные делегаты (стандартный)
// Action - возвращает значение void
// Func - возвращает значение
// Predicate<T> - проверяет объект <T> (true|false)

//Передача параметров в лямбда выражения
// 0 параметров
// () => ...
// 1 параметр
// парам1 => ...
// >1 параметра
// (парам1, парам2, ...) => ...

List<string> list = new();
list.Find(item => item.StartsWith("a")); //Predicate
list.Count(item => item.StartsWith("a")); //Func

MathDelegate math = (x, y) => x + y;
int sum = math(2, 3);
Console.WriteLine(sum);
static void WriteCurrentDate()
    => Console.WriteLine($"{DateTime.Now:D}");

Action hello = () => Console.WriteLine("hello world");
hello += WriteCurrentDate;
hello();

Func<int, int> square = x => x * x;
int result = square(5);
Console.WriteLine(result);

Func<int, int, bool> areEguals = (x, y) => x == y;
if (areEguals(1, 1))
    Console.WriteLine("x == y");

Predicate<int> isPositive = x => x > 0;
Console.WriteLine(isPositive(-5)); //false
Console.WriteLine(isPositive(0));  //false
Console.WriteLine(isPositive(2));  //true